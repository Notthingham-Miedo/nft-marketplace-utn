Marketplace de Pagos en ERC20

## Objetivos del proyecto
- Planificar arquitectura dApp: Diseño completo del ecosistema marketplace
- Crear token ERC20: Implementar moneda personalizada para pagos
- Desarrollar NFTs con IPFS: Crear y almacenar activos digitales descentralizados
- Integrar sistema de pagos: Conectar smart contracts para transacciones ERC20
- Construir interfaz Web3: Desarrollar frontend con Hardhat y Ethers.js

## Concepto general
- ¿Qué es un marketplace NFT?: Plataforma para comprar/vender activos digitales únicos
- Flujo de compra/venta: Transacciones usando tokens personalizados en blockchain
- Casos de uso reales: Arte digital, coleccionables, credenciales verificables

## Diagrama de arquitectura
- Contrato ERC20: Token personalizado para pagos
- Contrato NFT: Gestión de activos digitales únicos
- Contrato Marketplace: Lógica de compra/venta
- IPFS + Frontend: Almacenamiento descentralizado y UI

## Librerías necesarias
- OpenZeppelin: ERC20, ERC721 / Contracts seguros y auditados
- Hardhat: Entorno de desarrollo / Testing y deploy
- Ethers.js: Interacción con blockchain / Manejo de transacciones
- IPFS + dotenv: Almacenamiento descentralizado / Variables de entorno

---

# Paso 1: Diseño del token ERC20

- Nombre y símbolo => Identificadores únicos del token: Diplo (DIP)
- Supply inicial => 1,000,000 tokens al crear el contrato
- Función mint para testing => Crear tokens adicionales durante desarrollo

## Código ERC20
- Importar librería: OpenZeppelin ERC20
- Constructor: Nombre, símbolo, supply inicial
- Mint: Función para crear nuevos tokens

## Despliegue del token
- Script deploy.js: Código para desplegar contrato
- Red local: Pruebas en Hardhat Network
- Testnet Amoy: Despliegue en red Polygon de prueba

## Actividad: Probar token en consola
npx hardhat console => Iniciar consola interactiva
Verificar balances => Consultar tokens en billeteras
Probar transferencias => Enviar tokens entre cuentas

---

# Paso 2: Diseño del NFT

### Metadata en IPFS por ejemplo infura
Estructura JSON con datos del NFT:
• Nombre del activo
• Descripción detallada
• URL de imagen
• Atributos personalizados

### ERC721Enumerable
Ventajas sobre ERC721 básico:
• Funciones para listar tokens
• Consulta por índice
• Conteo total de NFTs
• Mejor para marketplaces

### Código NFT básico
1. Importar ERC721Enumerable => Librería OpenZeppelin para NFTs avanzados
2. Constructor => Inicializar nombre y símbolo
3. Mint con IPFS hash => Crear NFT vinculado a metadata

### Subida a IPFS
- Infura, Pinata o Web3.Storage => Servicios para subir archivos a IPFS
- Subir imágenes => Obtener CID único por archivo
- Crear JSON metadata => Nombre, descripción, URL imagen
- Vincular al NFT => URI apunta al hash IPFS

### Actividad: Subir imagen y generar metadata
- Seleccionar imagen => Archivo digital para convertir en NFT
- Subir a IPFS => Usar uno de los proveedores IPFS para almacenamiento permanente
- Crear JSON => Estructurar metadata con enlaces IPFS
- Verificar acceso => Comprobar URL pública funcional

--- 

# Paso 3: Contrato Marketplace

- Publicar NFT: Listar activos con precio en ERC20
- Comprar con ERC20: Pagar con tokens personalizados
- Transferencia automática: Smart contract gestiona intercambio

## Funciones principales
- listNFT(tokenId, price) => Publicar NFT a la venta
- buyNFT(tokenId) => Comprar NFT usando ERC20
- retirarGanancias() => Obtener fondos de venta

## Seguridad del Marketplace
- Verificación de propiedad : require(token.ownerOf == msg.sender)
- Permisos explícitos : approve / transferFrom
- Eventos y validaciones : Registro de acciones y verificaciones
- Prevención de ataques : Validación exhaustiva de entradas

## Integración de contratos
- Deploy conjunto : NFT, ERC20 y marketplace
- Referenciar direcciones : Conectar contratos entre sí
- Verificar permisos : Configurar roles y accesos
- Probar interacciones : Validar flujo completo

## Actividad: Deploy y testeo local
- Desplegar contratos : Usar Hardhat para deploy local
- Ejecutar tests : Verificar funcionalidad básica
- Simular transacciones : Probar flujo completo de compra/venta
- Validar eventos : Confirmar emisión correcta

---
# Flujo 4: Frontend Web3 - Interfaz de Usuario

## Estructura base del frontend

Tecnologías principales -> React, TypeScript, TailwindCSS
Stack Web3 moderno -> RainbowKit + Wagmi + Viem
Componentes React -> Interfaz de usuario modular y reutilizable
Servicios IPFS -> Pinata para almacenamiento descentralizado

## Configuración inicial del proyecto

### Instalación de dependencias
```bash
npm create react-app marketplace-frontend --template typescript
npm install @rainbow-me/rainbowkit wagmi viem @tanstack/react-query
npm install axios react-toastify lucide-react
npm install @tailwindcss/forms
```

### Configuración de RainbowKit y Wagmi
```typescript
// wagmi.config.ts
import { getDefaultConfig } from '@rainbow-me/rainbowkit';
import { mainnet, polygon, polygonAmoy } from 'wagmi/chains';

export const config = getDefaultConfig({
  appName: 'NFT Marketplace',
  projectId: 'YOUR_WALLET_CONNECT_PROJECT_ID',
  chains: [mainnet, polygon, polygonAmoy],
});
```

### Providers configuración
```typescript
// App.tsx
import { WagmiProvider } from 'wagmi';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { RainbowKitProvider } from '@rainbow-me/rainbowkit';
import { config } from './wagmi.config';
```

## Conexión de Wallet con RainbowKit

### Componente ConnectButton
- RainbowKit ConnectButton: Botón integrado para múltiples wallets
- Soporte automático: Metamask, WalletConnect, Coinbase, Trust Wallet
- Estado de conexión: Manejo automático del estado conectado/desconectado
- Cambio de red: Interfaz para cambiar entre chains configuradas

### Hooks de Wagmi para estado
```typescript
import { useAccount, useConnect, useDisconnect } from 'wagmi';

const { address, isConnected } = useAccount();
const { connect, connectors } = useConnect();
const { disconnect } = useDisconnect();
```

### Validación de red
```typescript
import { useChainId, useSwitchChain } from 'wagmi';

const chainId = useChainId();
const { switchChain } = useSwitchChain();

// Verificar si está en Polygon Amoy (chainId: 80002)
const isCorrectNetwork = chainId === 80002;
```

## Mostrar NFTs disponibles

### Hook personalizado para NFTs
```typescript
import { useReadContract, useReadContracts } from 'wagmi';

const useNFTList = () => {
  // Obtener total supply
  const { data: totalSupply } = useReadContract({
    address: NFT_CONTRACT_ADDRESS,
    abi: nftAbi,
    functionName: 'totalSupply',
  });

  // Obtener metadata de múltiples NFTs
  const { data: nftData } = useReadContracts({
    contracts: Array.from({ length: totalSupply }, (_, i) => ({
      address: NFT_CONTRACT_ADDRESS,
      abi: nftAbi,
      functionName: 'tokenURI',
      args: [i + 1],
    })),
  });
};
```

### Componente NFTCard
- Imagen desde IPFS: Renderizar usando gateway de Pinata
- Metadata display: Nombre, descripción, atributos
- Estado de venta: Precio en tokens ERC20 o "No disponible"
- Acciones: Botones para comprar o gestionar NFT

### Fetch de metadata desde Pinata
```typescript
const fetchNFTMetadata = async (tokenURI: string) => {
  try {
    // Convertir IPFS hash a URL de Pinata gateway
    const ipfsHash = tokenURI.replace('ipfs://', '');
    const url = `https://gateway.pinata.cloud/ipfs/${ipfsHash}`;
    const response = await fetch(url);
    return await response.json();
  } catch (error) {
    console.error('Error fetching metadata:', error);
  }
};
```

## Publicar NFT

### Formulario de creación
- Upload de imagen: Input file con preview
- Campos metadata: Nombre, descripción, atributos personalizados
- Validación: Verificar campos requeridos y formato de imagen
- Precio en ERC20: Input para establecer precio de venta

### Subida a Pinata IPFS
```typescript
import axios from 'axios';

const uploadToPinata = async (file: File) => {
  const formData = new FormData();
  formData.append('file', file);

  const response = await axios.post(
    'https://api.pinata.cloud/pinning/pinFileToIPFS',
    formData,
    {
      headers: {
        'Content-Type': 'multipart/form-data',
        'pinata_api_key': process.env.REACT_APP_PINATA_API_KEY,
        'pinata_secret_api_key': process.env.REACT_APP_PINATA_SECRET_KEY,
      },
    }
  );

  return response.data.IpfsHash;
};
```

### Mint y listar NFT
```typescript
import { useWriteContract, useWaitForTransactionReceipt } from 'wagmi';

const useMintAndList = () => {
  const { writeContract, data: hash } = useWriteContract();
  const { isLoading, isSuccess } = useWaitForTransactionReceipt({ hash });

  const mintNFT = async (metadataURI: string, price: bigint) => {
    // 1. Mint NFT
    writeContract({
      address: NFT_CONTRACT_ADDRESS,
      abi: nftAbi,
      functionName: 'mint',
      args: [metadataURI],
    });

    // 2. Aprobar marketplace
    // 3. Listar para venta
  };
};
```

## Comprar NFT

### Verificar balance ERC20
```typescript
const { data: balance } = useReadContract({
  address: TOKEN_CONTRACT_ADDRESS,
  abi: erc20Abi,
  functionName: 'balanceOf',
  args: [address],
});

const { data: allowance } = useReadContract({
  address: TOKEN_CONTRACT_ADDRESS,
  abi: erc20Abi,
  functionName: 'allowance',
  args: [address, MARKETPLACE_CONTRACT_ADDRESS],
});
```

### Proceso de compra
```typescript
const useBuyNFT = () => {
  const { writeContract } = useWriteContract();

  const buyNFT = async (tokenId: number, price: bigint) => {
    // 1. Verificar balance suficiente
    if (balance < price) {
      throw new Error('Balance insuficiente');
    }

    // 2. Aprobar tokens si es necesario
    if (allowance < price) {
      await writeContract({
        address: TOKEN_CONTRACT_ADDRESS,
        abi: erc20Abi,
        functionName: 'approve',
        args: [MARKETPLACE_CONTRACT_ADDRESS, price],
      });
    }

    // 3. Ejecutar compra
    await writeContract({
      address: MARKETPLACE_CONTRACT_ADDRESS,
      abi: marketplaceAbi,
      functionName: 'buyNFT',
      args: [tokenId],
    });
  };
};
```

## Actividad: Flujo completo en local

### Configuración del entorno
1. Configurar variables: Claves API de Pinata, direcciones de contratos
2. Setup RainbowKit: Configurar providers y chains
3. Iniciar Hardhat: Red local para testing
4. Deploy contratos: ERC20, NFT y Marketplace en local

### Flujo de testing completo
1. **Conectar wallet**: Usar RainbowKit para conectar Metamask
2. **Crear NFT**: Subir imagen a Pinata, generar metadata, mintear NFT
3. **Listar para venta**: Establecer precio en tokens ERC20
4. **Aprobar tokens**: Autorizar gasto de tokens al marketplace
5. **Comprar NFT**: Ejecutar transacción completa de compra
6. **Verificar transferencia**: NFT transferido al comprador

## Manejo de errores y UX

### Feedback visual con React Toastify
```typescript
import { toast } from 'react-toastify';

const handleTransaction = async () => {
  try {
    toast.info('Iniciando transacción...');
    const tx = await writeContract({...});
    toast.loading('Esperando confirmación...');
    await waitForTransactionReceipt(tx);
    toast.success('¡Transacción exitosa!');
  } catch (error) {
    toast.error('Error en la transacción');
  }
};
```

### Estados de botones
```typescript
const ButtonState = {
  IDLE: 'Comprar NFT',
  APPROVING: 'Aprobando tokens...',
  BUYING: 'Comprando NFT...',
  SUCCESS: 'Compra exitosa',
  ERROR: 'Error en compra'
};
```

### Validaciones UX
1. **Estados de carga**: Spinners durante transacciones
2. **Validación de red**: Mostrar alerta si no está en Amoy
3. **Balance insuficiente**: Deshabilitar botón y mostrar mensaje
4. **Errores descriptivos**: Traducir errores técnicos a mensajes claros

## Integración IPFS con Pinata

### Configuración del SDK de Pinata
```typescript
// pinata.config.ts
import axios from 'axios';

const pinataAPI = axios.create({
  baseURL: 'https://api.pinata.cloud',
  headers: {
    'pinata_api_key': process.env.REACT_APP_PINATA_API_KEY,
    'pinata_secret_api_key': process.env.REACT_APP_PINATA_SECRET_KEY,
  },
});

export const uploadJSONToPinata = async (jsonData: object) => {
  const response = await pinataAPI.post('/pinning/pinJSONToIPFS', jsonData);
  return response.data.IpfsHash;
};
```

### Gateway de Pinata para visualización
```typescript
const getIPFSUrl = (hash: string) => {
  return `https://gateway.pinata.cloud/ipfs/${hash}`;
};

// En componente React
<img src={getIPFSUrl(imageHash)} alt="NFT" />
```
4. Mostrar contenido -> Renderizar desde gateway IPFS

Configuración para testnet Amoy
Archivo .env => PRIVATE_KEY, AMOY_RPC_URL, ETHERSCAN_API_KEY, WEB3STORAGE_TOKEN
hardhat.config.js:
networks: {
amoy: {
url: process.env.AMOY_RPC_URL
chainId: 80002
}
}

Verificación en blockchain
- Polygonscan / Etherscan: Exploradores oficiales de blockchain
- Verificar código: Publicar source code del contrato
- Validar deploy: Confirmar dirección y bytecode
- Probar funciones: Interactuar desde interfaz explorer

Actividad: Publicar NFT en Amoy
- Crear arte digital: Diseñar NFT de prueba
- Subir a IPFS: Almacenar imagen y metadata
- Mintear en testnet: Crear NFT en Polygon Amoy
- Listar y comprar: Probar flujo completo

### A tener en cuenta
1. Gas y optimización
- Costos de storage => Almacenamiento onchain es caro
- Optimizar lógica => Reducir operaciones costosas
- Minimizar transferencias => Operaciones con tokens consumen gas
- Evitar loops => Limitar iteraciones en funciones

2. Separación de responsabilidades
- Un contrato por dominio: Separar ERC20, NFT y Marketplace
- Interfaces claras: Comunicación por métodos públicos
- Frontend desacoplado: Separar UI de lógica blockchain
- Estructura modular: Facilitar actualizaciones y testing

Revisión del flujo completo
1. Crear NFT: Mint con IPFS metadata
2. Publicar: Listar con precio ERC20
3. Comprar: Adquirir con tokens
4. Transferir: NFT cambia de dueño

Desafíos técnicos -> IPFS down (Gateway caído, CID incorrecto, Metadata no encontrada), Error de approve (Falta autorización, Monto insuficiente, Owner incorrecto) y Race conditions (Transacciones simultáneas, Estado inconsistente, Reordenamiento en mempool).
Alternativas a IPFS -> Arweave, Filecoin o NFT.Storage.
Alternativas de UX Web3 -> WalletConnect, RainbowKit, Magic Link o Social Login.

Seguridad Web3 -> Validar firmas (Verificar autenticidad de mensajes), Prevenir replay atacks (Usar nonces o timestamps), Approval exhaust (Evitar aprobaciones ilimitadas).

Extensiones futuras (no implementar): Subastas, Royalties, Ranking y Perfiles de usuarios

### Actividad: Proponer mejoras
1. Identificar limitaciones: Problemas del marketplace actual
2. Diseñar solución: Mejora técnica o de UX
3. Planificar implementación: Cambios en contratos o frontend
4. Presentar propuesta: Compartir con el grupo

---

## Cierre y próximos pasos
- Práctica guiada: Desarrollar colección NFT propia
- Marketplace completo: Implementar funcionalidades avanzadas
- Lanzamiento: Publicar proyecto en mainnet

### Contrato ERC20 personalizado
- Estructura básica
Contract MiToken implementa ERC20:
• SPDX-License-Identifier
• Versión pragma ^0.8.19
• Import OpenZeppelin
- Constructor
Inicialización del token:
• Nombre: "MiToken"
• Símbolo: "MTK"
• Supply: 1M tokens

### Contrato ERC721 para NFT
Estructura -> ERC721Enumerable + Ownable
Metadata -> Nombre: "MiNFT", Símbolo: "MNFT"
Función mint -> _safeMint con nextTokenId
Control de acceso -> onlyOwner para proteger mint

### Estructura del Marketplace
Struct Listing -> Datos del NFT en venta
address seller -> Vendedor original del NFT
uint price -> Precio en tokens ERC20
mapping listings -> Asocia tokenId con su Listing

### Función para listar NFTs
transferFrom -> NFT del usuario al contrato
Registro de datos -> Crear Listing con detalles
Evento NFTListed -> Notificar nueva publicación
Verificaciones -> Validar precio > 0

### Función para comprar NFTs
- Recuperar datos: Obtener Listing del mapping
- Transferir tokens: ERC20 del comprador al vendedor
- Transferir NFT: Enviar NFT al comprador
- Limpiar estado: Eliminar Listing finalizada

### Eventos para trazabilidad
- event NFTListed
Campos indexados:
• address seller
• address nft
• uint tokenId
• uint price
- event NFTPurchased
Campos indexados:
• address buyer
• address nft
• uint tokenId
• uint price
- Beneficios
• Historial completo
• Actualizaciones UI
• Filtrado eficiente
• Análisis offchain

### Función con eventos
1. Transferir NFT: Del vendedor al contrato marketplace
2. Guardar información: Almacenar datos en mapping listings
3. Emitir evento: emit NFTListed con todos los datos
4. Actualizar frontend: La UI escucha y muestra nuevo NFT

### Retiro de ganancias
1. mapping ganancias: Registro de fondos por usuario
2. Validación: require(monto > 0, "Nada para retirar")
3. Patrón Pull Payment: Previene ataques de reentrancia

### Listar múltiples NFTs
-  Validación de arrays => tokenIds.length == precios.length
- Iteración controlada => for loop con longitud limitada
- Listing individual => listNFT() para cada elemento

### Validación y control de errores
- Precio válido : require(price > 0)
-Propiedad del NFT : require(token.ownerOf == msg.sender)
- Custodia correcta : require(NFT en contrato)
- Mensajes descriptivos : Errores claros para debugging

### Conectar Metamask
- Verificar disponibilidad : if (window.ethereum) 1
- Solicitar cuentas : eth_requestAccounts
- Obtener dirección : cuentas[0] del usuario
- Crear provider y signer : Objetos para interactuar con blockchain

### Mostrar NFTs disponibles
- Consultar totalSupply() : Obtener cantidad de NFTs
- tokenByIndex(i) : Obtener ID de cada NFT
- tokenURI(id) : Obtener URL de metadata
- fetch(uri) : Descargar JSON desde IPFS

### Cargar archivos a IPFS
- Configurar cliente : Web3Storage con API key
- Preparar archivo : Imagen o JSON para subir
- client.put([file]) : Upload a IPFS network
- Generar URL : https://${cid}.ipfs.w3s.link/${filename}

### Publicar NFT desde frontend
- Inicializar contrato : new ethers.Contract(address, abi, signer)
- Preparar parámetros : tokenId y precio en tokens
- Llamar a listNFT : contrato.listNFT(params)
- Esperar confirmación : await tx.wait()

### Aprobar token ERC20 para compra
- Inicializar contrato ERC20 : Con dirección y ABI del token
- Llamar approve() : Autorizar gasto al marketplace
- Especificar monto : Cantidad de tokens a gastar
- Esperar confirmación : Transacción confirmada en blockchain

### Comprar NFT desde frontend
- Inicializar marketplace : Contrato con dirección y signer
- Seleccionar NFT : Identificar por tokenId
- Especificar token : Dirección del ERC20
- Ejecutar compra : contrato.buyNFT(tokenId, tokenAddr)

### Leer eventos desde frontend
- Configurar listener
Código para escuchar eventos:
• contratoMarketplace.on
• "NFTListed" como evento
• Función callback
• Parámetros del evento
- Procesar evento
Acciones al recibir notificación:
• Extraer datos (seller, nft, tokenId, price)
• Actualizar UI
• Notificar al usuario
• Registrar en consola

### Mostrar balance ERC20
- Obtener balance : contratoERC20.balanceOf(cuenta)
- Formatear unidades : ethers.utils.formatUnits(balance, 18)
- Actualizar interfaz : document.getElementById("balance").innerText
- Refrescar periódicamente : Actualizar tras transacciones

### Manejo de errores en transacciones
- Estructura try/catch
• try { tx = await... }
• catch (error) { ... }
- Errores comunes
• Falta de aprobación
• Gas insuficiente
• Rechazo de usuario
- Mensajes útiles
• Traducir error.message
• Sugerir soluciones
• Mostrar códigos para debugging

### Confirmar red de Metamask
1. Verificar network -> Version window.ethereum.networkVersion
2. Comparar con Amoy -> Debe ser '80002' (Polygon Amoy)
3. Mostrar alerta -> Si la red es incorrecta
4. Sugerir cambio -> Guiar al usuario para cambiar red
